/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sparta_music_player;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Map;
import java.util.Queue;
import javafx.scene.media.MediaPlayer;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author User
 */


public class musicplayerGUI extends javax.swing.JFrame {

    
    private MediaPlayer mediaPlayer; // Use appropriate media player class
    private Queue<String> musicQueue; // Queue to manage music tracks
    private Map<String, String> albumArtMap; // Map to store music file paths and corresponding album art paths

    // Temporary path for testing
    private static final String TEMP_MUSIC_PATH = "/path/to/your/music.mp3";

    
    private boolean isPlaying = false;
    private Timer timer;
    private int musicDuration;
    private int currentSongIndex = 0;
    
     // For demonstration purposes, assuming you have a list of song durations
    private int[] songDurations = {120, 180, 150}; // Adjust these values accordingly

    
    /**
     * Creates new form musicplayerGUI
     */
    public musicplayerGUI() {
        
        initComponents(); 
        
        musicDuration = songDurations[currentSongIndex];
        
        music_slider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        
        // Set the initial value to the minimum to start on the left side
        music_slider.setValue(music_slider.getMinimum());
        volume_Slider.setValue(music_slider.getMinimum());

        // Add ChangeListener to the music_slider
        music_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            music_sliderStateChanged(evt);
           }
    });

}

     // Handle volume_Slider state change
    private void volume_SliderStateChanged(javax.swing.event.ChangeEvent evt) {
        if (!volume_Slider.getValueIsAdjusting()) {
            // Slider value changed, update volume
            int newVolume = volume_Slider.getValue();
            System.out.println("Volume changed to: " + newVolume);

            // Add logic to set the volume in your music player
        }
    }
    
    // Handle music_slider state change
    private void music_sliderStateChanged(javax.swing.event.ChangeEvent evt) {
        if (!music_slider.getValueIsAdjusting()) {
         // Slider value changed, update music playback position
            int newPosition = music_slider.getValue();
            System.out.println("Seeking to position: " + newPosition);
            // Add logic to set the playback position in your music player
    }
         
}
   

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        music_slider = new javax.swing.JSlider();
        like_checkbox = new javax.swing.JCheckBox();
        artist_name_label = new javax.swing.JLabel();
        song_title_label = new javax.swing.JLabel();
        pause_play_button = new javax.swing.JToggleButton();
        next_button = new javax.swing.JButton();
        prev_button = new javax.swing.JButton();
        music_art = new javax.swing.JPanel();
        music_list = new java.awt.List();
        volume_Slider = new javax.swing.JSlider();
        volume_label = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        search_menu = new javax.swing.JMenu();
        createPlaylist_menu = new javax.swing.JMenu();
        genre_menu = new javax.swing.JMenu();

        jMenu4.setText("File");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        music_slider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        like_checkbox.setText("Like");

        artist_name_label.setText("Artist Name, Album Name");

        song_title_label.setText("Song Title");

        pause_play_button.setText("Play");
        pause_play_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pause_play_buttonActionPerformed(evt);
            }
        });

        next_button.setText("Next");
        next_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_buttonActionPerformed(evt);
            }
        });

        prev_button.setText("Prev");
        prev_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prev_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout music_artLayout = new javax.swing.GroupLayout(music_art);
        music_art.setLayout(music_artLayout);
        music_artLayout.setHorizontalGroup(
            music_artLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );
        music_artLayout.setVerticalGroup(
            music_artLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
        );

        volume_label.setText("Volume");

        search_menu.setText("Search");
        search_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_menuActionPerformed(evt);
            }
        });
        jMenuBar1.add(search_menu);

        createPlaylist_menu.setText("Create Playlist");
        jMenuBar1.add(createPlaylist_menu);

        genre_menu.setText("Genre");
        jMenuBar1.add(genre_menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(prev_button, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(pause_play_button, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(next_button, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volume_label)
                        .addGap(122, 122, 122))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(volume_Slider, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(66, Short.MAX_VALUE)
                        .addComponent(music_art, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(music_list, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(artist_name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(song_title_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(music_slider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(like_checkbox)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(music_art, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(music_list, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(song_title_label, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(artist_name_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(music_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(like_checkbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pause_play_button)
                    .addComponent(prev_button)
                    .addComponent(next_button)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(volume_label, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volume_Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void next_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_buttonActionPerformed
        // TODO add your handling code here:
        playNextSong();
    }//GEN-LAST:event_next_buttonActionPerformed

    private void pause_play_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_play_buttonActionPerformed
        // TODO add your handling code here:
        togglePlayPause();
} 

private void togglePlayPause() {
    if (isPlaying) {
        // Pause music logic
        System.out.println("Pausing music");
        pause_play_button.setText("Play");
    } else {
        // Play music logic
        System.out.println("Playing music");
        pause_play_button.setText("Pause");
    }

    isPlaying = !isPlaying;
    }//GEN-LAST:event_pause_play_buttonActionPerformed

    private void prev_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prev_buttonActionPerformed
        // TODO add your handling code here:
        playPreviousSong();
    }//GEN-LAST:event_prev_buttonActionPerformed

    private void search_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_menuActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_search_menuActionPerformed

    
    private void playNextSong() {
        currentSongIndex = (currentSongIndex + 1) % songDurations.length;
        changeSong();
    }

    private void playPreviousSong() {
        currentSongIndex = (currentSongIndex - 1 + songDurations.length) % songDurations.length;
        changeSong();
    }

    private void changeSong() {
        // You can modify this part to suit your actual implementation for changing songs
        // In this example, we reset the music duration and slider value
         musicDuration = songDurations[currentSongIndex];
    
        // Reset music_slider based on the new song's duration
        music_slider.setMaximum(musicDuration);
        music_slider.setValue(0);
    
        music_slider.setMaximum(musicDuration);
        music_slider.setValue(0);

        // Additional logic to set the song details (title and artist) based on the selected song file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Audio Files", "mp3", "wav", "flac"));
        int result = fileChooser.showOpenDialog(this);
        
        

        if (result == JFileChooser.APPROVE_OPTION) {
            String selectedFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            // Extract song details (title and artist) from the file metadata or the file name
            String songTitle = extractSongTitle(selectedFilePath);
            String artistName = extractArtistName(selectedFilePath);

            // Set the labels with the extracted details
            song_title_label.setText(songTitle);
            artist_name_label.setText(artistName);
        }

        System.out.println("Changing to the next song");
    }
    
    // Dummy methods to simulate extracting song details from the file path
    private String extractSongTitle(String filePath) {
        // Implement your logic to extract song title from the file path or metadata
        return "Song Title";
    }

    private String extractArtistName(String filePath) {
        // Implement your logic to extract artist name from the file path or metadata
        return "Artist Name";
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
         /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(musicplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(musicplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(musicplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(musicplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new musicplayerGUI().setVisible(true);
            }
        });
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel artist_name_label;
    private javax.swing.JMenu createPlaylist_menu;
    private javax.swing.JMenu genre_menu;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JCheckBox like_checkbox;
    private javax.swing.JPanel music_art;
    private java.awt.List music_list;
    private javax.swing.JSlider music_slider;
    private javax.swing.JButton next_button;
    private javax.swing.JToggleButton pause_play_button;
    private javax.swing.JButton prev_button;
    private javax.swing.JMenu search_menu;
    private javax.swing.JLabel song_title_label;
    private javax.swing.JSlider volume_Slider;
    private javax.swing.JLabel volume_label;
    // End of variables declaration//GEN-END:variables
}
